/*
import { MetaTipo } from "../tipos/MetaTipo";
const token = localStorage.getItem("token"); // üî• Obtiene el token del almacenamiento
console.log("Token recuperado:", token); // üëà Verifica que no sea null/undefined
const apiUrl = import.meta.env.VITE_API_URL || "http://localhost:10000";

export async function pedirMetas(): Promise<MetaTipo[]> {
  const token = localStorage.getItem("token");
  if (!token) {
    console.log("‚ö† No hay token, no se pedir√°n metas.");
    return [];
  }

  console.log("üì° Enviando petici√≥n con token:", token);

  const response = await fetch(`${apiUrl}/api/metas`, { // üî• URL completa
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  if (!response.ok) {
    console.error("üö® Error en la petici√≥n de metas:", response.status);
    throw new Error("Error al obtener metas");
  }

  return await response.json();
}

export async function pedirMeta(id: number): Promise<MetaTipo> {
  // const response = await fetch('/meta.json');
  const token = localStorage.getItem("token"); // üëà Obtener token aqu√≠
  if (!token) throw new Error("No autenticado"); // üëà Validaci√≥n a√±adida

  const response = await fetch(`${apiUrl}/api/metas/${id}`, { // üî• URL completa
    headers: {
      "Authorization": `Bearer ${token}`, // üëà Incluir token
      "Accept": "application/json" // üëà A√±adir
    },
  });
  if (!response.ok) throw new Error("Meta no encontrada");
  return await response.json();
}

// Funci√≥n para formatear fecha a ISO
const formatearFechaParaAPI = (fecha: string) => {
  return new Date(fecha).toISOString();
};

export async function crearMeta(meta: MetaTipo): Promise<MetaTipo> {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No autenticado");

  // üî• Formatear fecha antes de enviar
  const metaFormateada = {
    ...meta,
    plazo: formatearFechaParaAPI(meta.plazo)
  };

  const response = await fetch(`${apiUrl}/api/metas`, {
    method: "POST",
    body: JSON.stringify(metaFormateada), // üëà Enviar meta formateada
    headers: {
      "Content-Type": "application/json; charset=UTF-8",
      "Accept": "application/json",
      "Authorization": `Bearer ${token}`
    },
  });
  
  if (!response.ok) throw new Error("Error creando meta");
  return await response.json();
}

export async function actualizarMeta(meta: MetaTipo): Promise<MetaTipo> {
  const token = localStorage.getItem("token");
  if (!token) throw new Error("No hay token de autenticaci√≥n");

  // üî• Formatear fecha antes de enviar
  const metaFormateada = {
    ...meta,
    plazo: formatearFechaParaAPI(meta.plazo)
  };

  const response = await fetch(`${apiUrl}/api/metas/${meta.id}`, {
    method: "PUT",
    body: JSON.stringify(metaFormateada), // üëà Enviar meta formateada
    headers: {
      "Content-Type": "application/json; charset=UTF-8",
      Authorization: `Bearer ${token}`,
    },
  });

  if (!response.ok) throw new Error("Error actualizando meta");
  return await response.json();
}

export async function borrarMeta(id: number): Promise<void> {
  const token = localStorage.getItem("token"); // üëà Obtener token aqu√≠
  // const response = await fetch('/meta.json');
  await fetch(`${apiUrl}/api/metas/${id}`, {
    method: "DELETE",
    headers: {
      Authorization: `Bearer ${token}`, // üî• Agrega esta l√≠nea nueva
    },
  });
  console.log("Meta borrada!", id);
}
  */

import { MetaTipo } from "../tipos/MetaTipo";

// La URL de la API se define una sola vez
const apiUrl = import.meta.env.VITE_API_URL || "http://localhost:10000";

/**
 * Funci√≥n auxiliar para manejar errores de autenticaci√≥n (401/403).
 * Limpia la sesi√≥n y fuerza la redirecci√≥n al login.
 */
function handleAuthError(status: number) {
    if (status === 401 || status === 403) {
        console.error(`üö® Error de Autenticaci√≥n ${status}: Sesi√≥n expirada o no v√°lida. Forzando cierre de sesi√≥n.`);
        
        // 1. Limpiar el token
        localStorage.removeItem('token');
        
        // 2. Redirigir al login (o recargar, para que React maneje la ruta autom√°ticamente)
        window.location.href = '/acceso'; // Asume que '/acceso' es tu ruta de login
        
        // Lanzar un error para detener la ejecuci√≥n de la promesa
        throw new Error("SESION_EXPIRADA");
    }
}

export async function pedirMetas(): Promise<MetaTipo[]> {
    const token = localStorage.getItem("token");
    if (!token) {
        console.log("‚ö† No hay token, no se pedir√°n metas.");
        // Si no hay token, simplemente devolvemos un array vac√≠o
        return []; 
    }

    console.log("üì° Enviando petici√≥n con token...");

    const response = await fetch(`${apiUrl}/api/metas`, {
        headers: {
            Authorization: `Bearer ${token}`,
        },
    });

    if (!response.ok) {
        // üö® AQU√ç USAMOS el nuevo manejador de errores
        handleAuthError(response.status);
        
        // Si no fue error de auth, lanzamos el error normal
        console.error("üö® Error en la petici√≥n de metas:", response.status);
        throw new Error("Error al obtener metas");
    }

    return await response.json();
}

export async function pedirMeta(id: number): Promise<MetaTipo> {
    const token = localStorage.getItem("token"); 
    if (!token) throw new Error("No autenticado"); 

    const response = await fetch(`${apiUrl}/api/metas/${id}`, { 
        headers: {
            "Authorization": `Bearer ${token}`, 
            "Accept": "application/json" 
        },
    });

    if (!response.ok) {
        handleAuthError(response.status); // üö® Verificar aqu√≠ tambi√©n
        throw new Error("Meta no encontrada");
    }
    return await response.json();
}

// Funci√≥n para formatear fecha a ISO
const formatearFechaParaAPI = (fecha: string) => {
    return new Date(fecha).toISOString();
};

export async function crearMeta(meta: MetaTipo): Promise<MetaTipo> {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("No autenticado");

    const metaFormateada = {
        ...meta,
        plazo: formatearFechaParaAPI(meta.plazo)
    };

    const response = await fetch(`${apiUrl}/api/metas`, {
        method: "POST",
        body: JSON.stringify(metaFormateada), 
        headers: {
            "Content-Type": "application/json; charset=UTF-8",
            "Accept": "application/json",
            "Authorization": `Bearer ${token}`
        },
    });
    
    if (!response.ok) {
        handleAuthError(response.status); // üö® Verificar aqu√≠ tambi√©n
        throw new Error("Error creando meta");
    }
    return await response.json();
}

export async function actualizarMeta(meta: MetaTipo): Promise<MetaTipo> {
    const token = localStorage.getItem("token");
    if (!token) throw new Error("No hay token de autenticaci√≥n");

    const metaFormateada = {
        ...meta,
        plazo: formatearFechaParaAPI(meta.plazo)
    };

    const response = await fetch(`${apiUrl}/api/metas/${meta.id}`, {
        method: "PUT",
        body: JSON.stringify(metaFormateada), 
        headers: {
            "Content-Type": "application/json; charset=UTF-8",
            Authorization: `Bearer ${token}`,
        },
    });

    if (!response.ok) {
        handleAuthError(response.status); // üö® Verificar aqu√≠ tambi√©n
        throw new Error("Error actualizando meta");
    }
    return await response.json();
}

export async function borrarMeta(id: number): Promise<void> {
    const token = localStorage.getItem("token"); 
    if (!token) throw new Error("No autenticado"); // Validaci√≥n de token

    const response = await fetch(`${apiUrl}/api/metas/${id}`, {
        method: "DELETE",
        headers: {
            Authorization: `Bearer ${token}`, 
        },
    });
    
    // Aqu√≠ no es necesario verificar response.ok para una operaci√≥n DELETE si solo importa la auth
    if (!response.ok && response.status !== 204) { // 204 No Content es com√∫n en DELETE exitosos
        handleAuthError(response.status); // üö® Verificar aqu√≠ tambi√©n
        throw new Error(`Error al borrar meta: ${response.status}`);
    }

    console.log("Meta borrada!", id);
}

