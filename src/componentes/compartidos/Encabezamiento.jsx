// src/componentes/compartidos/Encabezamiento.jsx
import { usarTema } from "../../memoria/ContextoTema";
import { useNavigate } from "react-router-dom";
import { eliminarUsuario } from "../../servicios/Auth"; // Nueva funci√≥n
import React, { useState, useContext, useEffect, useRef } from "react";
import styles from "./Encabezado.module.css";
import { ReactComponent as LogoSVG } from "./logo.svg";
import { ReactComponent as PerfilSVG } from "./perfil.svg";
import { cerrarSesion } from "../../servicios/Auth";
import { ContextoAuth } from "../../memoria/ContextoAuth"; // Importa el contexto de autenticaci√≥n


/**
 * Componente de encabezado con men√∫ de usuario y control de tema
 * @param {Function} toggleMenu - Funci√≥n para alternar men√∫ lateral en m√≥vil
 * @param {Boolean} privado - Indica si debe mostrar elementos de usuario autenticado
 */
function Encabezamiento({ toggleMenu, privado }) {
  const [mostrarMenu, setMostrarMenu] = useState(false);
  const [auth] = useContext(ContextoAuth); // Obt√©n el estado de autenticaci√≥n
  const menuRef = useRef(null); // Referencia al men√∫ desplegable
  const { temaOscuro, toggleTema } = usarTema(); //TRABAJANDO EN TEMA CLARO/OSCURO
  const navegar = useNavigate(); // <-- A√±adir esto

  // Alternar visibilidad del men√∫ de perfil
  const toggleMenuPerfil = () => {
    setMostrarMenu(!mostrarMenu);
  };

  // Cerrar sesi√≥n y redirigir
  const enCerrarSesion = () => {
    cerrarSesion(); // Limpia el localStorage y redirige
    navegar("/inicio");
  };

  // Efecto para cerrar el men√∫ al hacer clic fuera de √©l
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setMostrarMenu(false); // Cierra el men√∫ si el clic ocurre fuera
      }
    };

    // Agregar el listener al montar el componente
    document.addEventListener("mousedown", handleClickOutside);
    // Limpiar el listener al desmontar el componente
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Eliminar cuenta de usuario
  const enEliminarUsuario = async () => {
    console.log("üîç Estado actual de auth:", auth); // üëÄ Ver qu√© tiene auth en consola

    if (!auth.usuario || !auth.usuario.id) {
      // üî• Validar que haya usuario autenticado
      alert("Error: No hay usuario autenticado.");
      return;
    }

    if (
      window.confirm(
        "¬øEst√°s seguro de eliminar tu cuenta? Esta acci√≥n es irreversible"
      )
    ) {
      try {
        console.log("üóë Eliminando usuario con ID:", auth.usuario.id); // üëà Verificar el ID en la consola

        await eliminarUsuario(auth.token, auth.usuario.id);
        cerrarSesion();
        navegar("/inicio");
      } catch (error) {
        console.error("Error eliminando usuario:", error);
        alert("Error al eliminar la cuenta: " + error.message);
      }
    }
  };

  return (
    <header
      className={styles.encabezado}
      style={{
        backgroundColor: "var(--color-encabezado)",
        color: "var(--color-texto)",
      }}
    >
      <div className={styles.contenedor}>
        {privado && (
          <button className={styles.menuButton} onClick={toggleMenu} aria-label="Men√∫ principal">
            ‚ò∞
          </button>
        )}
        <LogoSVG className={styles.logo} aria-hidden="true"  />
        <a className={styles.titulo} href="/">
          Metas App
        </a>
      </div>

      <div className={styles.contenedorTema}>
        <button
          onClick={toggleTema}
          className={styles.botonTema}
          aria-label={`Cambiar a tema ${temaOscuro ? 'claro' : 'oscuro'}`}
        >
          {temaOscuro ? 'üåû' : 'üåô'}
        </button>

        {/* Mostrar el bot√≥n de perfil solo si el usuario est√° autenticado */}
        {auth.autenticado && (
          <nav className={styles.perfilContainer} ref={menuRef}>
            <button 
              className={styles.perfilBoton} 
              onClick={toggleMenuPerfil}
              aria-label="Men√∫ de usuario"
            >
              <PerfilSVG className={styles.perfilIcono} aria-hidden="true" />
            </button>

            <div className={`${styles.menuDesplegable} ${mostrarMenu ? styles.mostrar : ''}`}>
              <div className={styles.usuarioInfo}>
                <svg className={styles.opcionIcono} aria-hidden="true">
                  {/* Icono de perfil */}
                </svg>
                <div>
                  <div className={styles.nombreUsuario}>
                    {auth.usuario?.nombre || "Usuario"}
                  </div>
                  <div className={styles.emailUsuario}>
                    {auth.usuario?.email}
                  </div>
                </div>
              </div>

              <div className={styles.separador} />

              <button onClick={enCerrarSesion} className={styles.opcionMenu}>
                <svg className={styles.opcionIcono} aria-hidden="true">
                  {/* Icono de cerrar sesi√≥n */}
                </svg>
                Cerrar Sesi√≥n
              </button>

              <button
                onClick={enEliminarUsuario}
                className={`${styles.opcionMenu} ${styles.opcionPeligro}`}
              >
                <svg className={styles.opcionIcono} aria-hidden="true">
                  {/* Icono de eliminar cuenta */}
                </svg>
                Eliminar Cuenta
              </button>
            </div>
          </nav>
        )}
      </div>
    </header>
  );
}

export default Encabezamiento;
